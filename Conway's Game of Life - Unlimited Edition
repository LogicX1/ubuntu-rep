function getGeneration(cells, generations){
let result = cloneCells(cells);
for(let n=0 ; n<generations ; n++){
addBorder(result);
console.log('generation : ',n)
console.log('current generation',result)
result = cropResult(createNextGeneration(result));
}
return result;
}

function createNextGeneration (cells){
let nextGen = [];
for(let i=0 ; i<cells.length ; i++){
    nextGen.push([]);
    for(let j=0; j<cells[0].length;j++){
    nextGen[i].push( determineStatus(cells[i][j],calculatePopulation(cells,i,j)) );
    }
    
}
return nextGen;
}

function calculatePopulation (cells,i,j) {
let rows = cells.length , cols = cells[0].length;
let pop = 0;
for(let currRow = i-1 ; currRow < i+2 ; currRow++){
    for(let currCol = j-1 ; currCol < j+2 ; currCol++){
    if(currRow >= rows || currRow < 0 || currCol>=cols || currCol < 0 ){
     }else {
     pop+=cells[currRow][currCol];}
     }
  }
return pop-cells[i][j];
}

function determineStatus (cellStatus , population ){
switch (population){
case 0:
case 1: return 0;
case 2:return cellStatus;
case 3:return 1;
default:return 0;
}
return 'error';
}

function cropResult (nextGen){
console.log(nextGen);
let rows = nextGen.length , cols = nextGen[0].length , flag=0;
for(let currRow = 0 ; currRow < rows ; currRow++){
  if(!nextGen[currRow].includes(1)){
  console.log('Removing row',currRow);
  nextGen.splice(currRow,1)
  rows--;
  currRow--;
  }
}
for(let currCol = 0 ; currCol < cols ; currCol++){
flag=0;
  for(let currRow = 0 ; currRow < rows ; currRow++){
    if(nextGen[currRow][currCol] === 1){
    flag = 1;
    }
  }
  if(flag===0){
    console.log('Removing col',currCol);
    removeCol(nextGen,currCol)
    cols--;
    currCol--;
    } 
    console.log('after removinging col #',currCol)
    console.log(nextGen);
}
return nextGen;
}

function removeCol (gridArr,targetCol){
for(let i = 0 ; i<gridArr.length ; i++){
gridArr[i].splice (targetCol,1)
}
}

function cloneCells (cells){
let clonedCells = [];
cells.forEach(ele => {
let clonedRow = [...ele];
clonedCells.push(clonedRow)
})
return clonedCells;
}

function addBorder (clonedCells) {
clonedCells.forEach(a=>{
a.push(0);
a.unshift(0);
})
let zeroRow =[]; 
clonedCells[0].forEach(a => zeroRow.push(0));
clonedCells.push(zeroRow);
clonedCells.unshift(zeroRow);
return clonedCells;
}
